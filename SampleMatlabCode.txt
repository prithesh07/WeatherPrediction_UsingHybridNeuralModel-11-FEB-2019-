function varargout = WeatherData(varargin)
gui_Singleton = 1;
gui_State = struct('gui_Name', mfilename, ...
 'gui_Singleton', gui_Singleton, ...
 'gui_OpeningFcn', @WeatherData_OpeningFcn, ...
9
 'gui_OutputFcn', @WeatherData_OutputFcn, ...
 'gui_LayoutFcn', [] , ...
 'gui_Callback', []);
if nargin && ischar(varargin{1})
 gui_State.gui_Callback = str2func(varargin{1});
end
if nargout
 [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
 gui_mainfcn(gui_State, varargin{:});
end
% --- Executes just before WeatherData is made visible.
function WeatherData_OpeningFcn(hObject, eventdata, handles, varargin)
NNDATA = double([]);
% Choose default command line output for WeatherData
handles.NNDATA = NNDATA;
handles.output = hObject;
% Update handles structure
guidata(hObject, handles);
% UIWAIT makes WeatherData wait for user response (see UIRESUME)
% uiwait(handles.figure_weather);
% --- Outputs from this function are returned to the command line.
function varargout = WeatherData_OutputFcn(hObject, eventdata, handles)
% Get default command line output from handles structure
varargout{1} = handles.output;
% --- Executes on button press in button_import.
function button_import_Callback(hObject, eventdata, handles)
.
.
.
.
.
.
.
.
.
.
 if (handles.TEMPDATA(i, 1) == 2 && handles.TEMPDATA(i, 2) == 28) &&
(handles.TEMPDATA(i+1, 2) == 1)
 for j = length(handles.TEMPDATA)-1:-1:i+1
 handles.TEMPDATA(j+1, :) = handles.TEMPDATA(j, :);
 end
 handles.TEMPDATA(i+1, 1) = 2;
 handles.TEMPDATA(i+1, 2) = 29;
 handles.TEMPDATA(i+1, 3) = handles.TEMPDATA(i, 3);
 handles.TEMPDATA(i+1, 4) = NaN;
 end
end
%% Display TEMPDATA values in Table
set(handles.uitable1, 'data', handles.TEMPDATA);
guidata(hObject, handles);
11
msgbox('Missing Values replaced with NaN. Please Reduce Data to retrieve 20 Years Data.',
'Help', 'help');
% --- Executes on button press in button_reduce.
function button_reduce_Callback(hObject, eventdata, handles)
VARTEMP(7320, 4) = 0;
for i = 1: 7320
 VARTEMP(i, :) = handles.TEMPDATA(i, :);
end
%% Display TEMPDATA values in Table
set(handles.uitable1, 'data', VARTEMP);
.
.
.
.
.
.
set(handles.uitable2, 'data', handles.VARTEMP);
set(handles.text2, 'string', ['FINAL DATA SET - ' handles.filename]);
guidata(hObject, handles);
msgbox('All NaN Values removed. Please Add NN Data to generate Neural Network Data Set.',
'Help', 'help');
% --- Executes on button press in button_add.
function button_add_Callback(hObject, eventdata, handles)
odatasize = length(handles.NNDATA);
ndatasize = odatasize + 5856;
handles.NNDATA = resizem (handles.NNDATA, [5 ndatasize]);
handles.NNDATA (1, odatasize+1:ndatasize) = handles.VARTEMP (1: 5856, 4);
handles.NNDATA (2, odatasize+1:ndatasize) = handles.VARTEMP (367: 6222, 4);
handles.NNDATA (3, odatasize+1:ndatasize) = handles.VARTEMP (733: 6588, 4);
12
handles.NNDATA (4, odatasize+1:ndatasize) = handles.VARTEMP (1099: 6954, 4);
handles.NNDATA (5, odatasize+1:ndatasize) = handles.VARTEMP (1465: 7320, 4);
nninput = handles.NNDATA(1:4, :);
nnoutput = handles.NNDATA(5, :);
%% Display NNDATA values in Table
set(handles.uitable3, 'data', handles.NNDATA);
handles.nninput = nninput;
handles.nnoutput = nnoutput;
guidata(hObject, handles);
msgbox('Neural Network Data Set generated. Please Train NN (run Neural Network)or Import
Data (to add more Training Data).', 'Help', 'help');
% --- Executes on button press in button_train.
function button_train_Callback(hObject, eventdata, handles)
inputs = handles.nninput;
targets = handles.nnoutput;
% Create a Fitting Network
hiddenLayerSize = 4;
WeatherANN = fitnet(hiddenLayerSize);
% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
WeatherANN.inputs{1}.processFcns = {'removeconstantrows','mapminmax'};
WeatherANN.outputs{2}.processFcns = {'removeconstantrows','mapminmax'};
% Setup Division of Data for Training, Validation, Testing
WeatherANN.divideFcn = 'dividerand'; % Divide data randomly
WeatherANN.divideMode = 'sample'; % Divide up every sample
WeatherANN.divideParam.trainRatio = 80/100;
WeatherANN.divideParam.valRatio = 10/100;
WeatherANN.divideParam.testRatio = 10/100;
WeatherANN.trainFcn = 'trainlm'; % Levenberg-Marquardt
WeatherANN.trainFcn = 'trainr' ; % Random incremental algorithm
% a Performance Function
WeatherANN.performFcn = 'mse'; % Mean squared error
% Plot Functions
13
WeatherANN.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
 'plotregression', 'plotfit'};
% Train the Network
[WeatherANN,tr] = train(WeatherANN,inputs,targets);
% Test the Network
outputs = WeatherANN(inputs);
errors = gsubtract(targets,outputs);
% Recalculate Training, Validation and Test Performance
trainTargets = targets .* tr.trainMask{1};
valTargets = targets .* tr.valMask{1};
testTargets = targets .* tr.testMask{1};
% Print Performance
performance = perform(WeatherANN,targets,outputs)
trainPerformance = perform(WeatherANN,trainTargets,outputs)
valPerformance = perform(WeatherANN,valTargets,outputs)
testPerformance = perform(WeatherANN,testTargets,outputs)
% Save the Network
save WeatherANN;
msgbox('Neural Network Training Complete. Saved Successfully!!!', 'Help', 'help');
% --- Executes on button press in button_test.
function button_test_Callback(hObject, eventdata, handles)
TestANN;